# IS_QEMU: {{ IS_QEMU }}
FROM gentoo/stage3:latest
ENV MAKEOPTS="-j{{ CONCURRENCY_THREADS }}"

RUN echo 'GENTOO_MIRRORS="{{ GENTOO_MIRROR }}"' >> /etc/portage/make.conf && \
    echo 'dev-vcs/git curl -gpg -iconv -nls -pcre -perl -threads -webdav' > /etc/portage/package.use/git && \
    mkdir /etc/portage/repos.conf && \
    emerge-webrsync && \
    emerge -vq crossdev dev-vcs/git eselect-repository cpio bc dtc && \
    eselect repository add cross-r4s "" ""

RUN crossdev -S -t aarch64-unknown-linux-musl
{% if not IS_QEMU %}RUN crossdev -S -t arm-none-eabi{% endif %}

ENV CROSS_COMPILE=aarch64-unknown-linux-musl-
RUN mkdir -p /os/work

{% if IS_QEMU %}
RUN cd /os/work && \
    git clone --depth 1 https://github.com/u-boot/u-boot -b v2022.01 uboot && \
    cd /os/work/uboot && \
    make qemu_arm64_defconfig && \
    make -j{{  CONCURRENCY_THREADS }} && \
    cp u-boot.bin /os
ENV CFLAGS="-march=armv8-a -mtune=cortex-a72"
{% else %}
RUN cd /os/work && \
    git clone --depth 1 https://github.com/ARM-software/arm-trusted-firmware atf && \
    cd /os/work/atf && \
    make PLAT=rk3399 ARCH=aarch64 DEBUG=0 bl31

RUN cd /os/work && \
    git clone --depth 1 https://github.com/friendlyarm/uboot-rockchip -b nanopi4-v2020.10 uboot && \
    cd /os/work/uboot && \
    cp /os/work/atf/build/rk3399/release/bl31/bl31.elf . && \
    make ARCH=arm nanopi-r4s-rk3399_defconfig && \
    make ARCH=arm -j{{ CONCURRENCY_THREADS }} && \
    cp idbloader.img /os && \
    cp u-boot.itb /os

ENV CFLAGS="-march=armv8-a+crc+crypto -mtune=cortex-a72.cortex-a53"
{% endif %}

ENV LFS_ARCH="arm64"
ENV LFS_TARGET="aarch64-unknown-linux-musl"
ENV LFS_HOST="x86_64-pc-linux-gnu"
ENV CC="aarch64-unknown-linux-musl-gcc --sysroot=/os/rootfs"
ENV CXX="aarch64-unknown-linux-musl-g++ --sysroot=/os/rootfs"
ENV AR="aarch64-unknown-linux-musl-ar"
ENV AS="aarch64-unknown-linux-musl-as"
ENV LD="aarch64-unknown-linux-musl-ld --sysroot=/os/rootfs"
ENV RANLIB="aarch64-unknown-linux-musl-ranlib"
ENV READELF="aarch64-unknown-linux-musl-readelf"
ENV STRIP="aarch64-unknown-linux-musl-strip"

RUN mkdir -p /os/rootfs && \
    mkdir -p /os/rootfs/{bin,boot,dev,etc,home,lib/{firmware,modules}} && \
    mkdir -p /os/rootfs/{mnt,opt,proc,srv,sys,usr/bin} && \
    cd /os/rootfs && ln -vs ./sbin ./usr/bin && \
    mkdir -p /os/rootfs/var/{cache,lib,local,lock,log,opt,run,spool} && \
    install -dv -m 0750 /os/rootfs/root && \
    install -dv -m 1777 /os/rootfs/{var/,}tmp && \
    mkdir -p /os/rootfs/usr/{,local/}{bin,include,lib,sbin,share,src} && \
    ln -sf ../proc/mounts /os/rootfs/etc/mtab && \
    touch /os/rootfs/var/log/lastlog && \
    chmod -v 664 /os/rootfs/var/log/lastlog

RUN cd /os/work && \
    wget https://musl.libc.org/releases/musl-1.2.2.tar.gz && \
    tar -xf musl-1.2.2.tar.gz && \
    mkdir /os/work/musl-build && cd /os/work/musl-build && \
    ../musl-1.2.2/configure \
    CROSS_COMPILE=$LFS_TARGET- \
    --prefix=/ \
    --disable-static \
    --target=$LFS_TARGET && \
    make -j$(nproc) && \
    DESTDIR=/os/rootfs make install-libs && \
    DESTDIR=/os/rootfs/usr make install-headers && \
    rm -rf /tmp/work/musl-build && \
    rm -rf /tmp/work/musl-1.2.2 && \
    rm -rf /tmp/work/musl-1.2.2.tar.gz

# make ARCH=$LFS_ARCH defconfig && \

ADD busybox-config /tmp
RUN cd /os/work && \
    wget https://busybox.net/downloads/busybox-1.35.0.tar.bz2 && \
    tar -xf busybox-1.35.0.tar.bz2 && \
    cd /os/work/busybox-1.35.0 && \
    cp /tmp/busybox-config .config && \
    make -j$(nproc) ARCH=$LFS_ARCH CROSS_COMPILE="$LFS_TARGET-" && \
    make ARCH=$LFS_ARCH CROSS_COMPILE="$LFS_TARGET-" CONFIG_PREFIX="/os/rootfs" install

ADD nanopi-r4s.patch /tmp
ADD kernel-config-new /tmp
RUN cd /os/work && \
    git clone https://kernel.googlesource.com/pub/scm/linux/kernel/git/stable/linux.git --depth 1 -b linux-5.15.y kernel && \
    cd /os/work/kernel && \
    git apply /tmp/nanopi-r4s.patch && \
    touch .scmversion && \
    mv /tmp/kernel-config-new /os/work/kernel/.config && \
    make ARCH=$LFS_ARCH CROSS_COMPILE="${LFS_TARGET}-" -j$(nproc) && \
    make ARCH=$LFS_ARCH CROSS_COMPILE="${LFS_TARGET}-" INSTALL_MOD_PATH=/os/rootfs INSTALL_MOD_STRIP=1 modules_install && \
    make ARCH=$LFS_ARCH CROSS_COMPILE="${LFS_TARGET}-" INSTALL_HDR_PATH=/os/rootfs/usr headers_install && \
    export R4S_KERNEL_VER=`make kernelrelease` && \
    cp .config "/os/rootfs/boot/config-${R4S_KERNEL_VER}" && \
    cp arch/arm64/boot/Image "/os/rootfs/boot/Image-${R4S_KERNEL_VER}" {% if not IS_QEMU %}&& \
    cp arch/arm64/boot/dts/rockchip/rk3399-nanopi-r4s.dtb /os/rootfs/boot {% endif %}

ADD etc/rc.d /os/rootfs/etc/rc.d
ADD etc/passwd /os/rootfs/etc
ADD etc/group /os/rootfs/etc
ADD etc/protocols /os/rootfs/etc
ADD etc/services /os/rootfs/etc
ADD etc/mdev.conf /os/rootfs/etc
ADD etc/profile /os/rootfs/etc
ADD etc/inittab /os/rootfs/etc
ADD etc/hosts /os/rootfs/etc
RUN echo 'r4s' > /os/rootfs/etc/hostname
RUN mkdir -pv /os/rootfs/etc/rc.d/{start,stop} && \
    mkdir -pv /os/rootfs/etc/network/if-{post-{up,down},pre-{up,down},up,down}.d && \
    mkdir -pv /os/rootfs/usr/share/udhcpc
ADD etc/network/interfaces /os/rootfs/etc/network
ADD udhcpc-default-script /os/rootfs/usr/share/udhcpc/default.script
RUN chmod +x /os/rootfs/usr/share/udhcpc/default.script && \
    cd /os/rootfs/etc/rc.d/start && \
        ln -sf ../init.d/syslog S05syslog && \
        ln -sf ../init.d/sshd S30sshd && \
        ln -sf ../init.d/netplugd S10netplugd && \
    cd /os/rootfs/etc/rc.d/stop && \
        ln -sf ../init.d/syslog K99syslog && \
        ln -sf ../init.d/sshd K30sshd && \
        ln -sf ../init.d/netplugd K90netplugd

RUN cd /os/work && \
    wget https://zlib.net/zlib-1.2.11.tar.gz && \
    tar -xf zlib-1.2.11.tar.gz && \
    cd /os/work/zlib-1.2.11 && \
    CC="${CC} -Os" ./configure --shared && \
    make -j$(nproc) && \
    make prefix=/usr/aarch64-unknown-linux-musl install && \
    cp /usr/aarch64-unknown-linux-musl/lib/libz.so.1.2.11 /os/rootfs/lib && \
    cd /os/rootfs/lib && ln -vs libz.so.1.2.11 libz.so.1

RUN cd /os/work && \
    wget https://matt.ucc.asn.au/dropbear/dropbear-2020.81.tar.bz2 && \
    tar -xf /os/work/dropbear-2020.81.tar.bz2 && \
    cd /os/work/dropbear-2020.81 && \
    CC="${CC} -Os" ./configure --prefix=/usr --host=$LFS_TARGET && \
    make MULTI=1 PROGRAMS="dropbear dbclient dropbearkey dropbearconvert scp" && \
    make MULTI=1 PROGRAMS="dropbear dbclient dropbearkey dropbearconvert scp" install DESTDIR=/os/rootfs && \
    install -dv /os/rootfs/etc/dropbear && \
    mkdir /root/.ssh

RUN sed -i 's/unset EXTRA_PKG_CONFIG/#unset EXTRA_PKG_CONFIG/g' /usr/bin/cross-pkg-config

RUN cd /os/work && \
    wget https://mirror.yandex.ru/mirrors/gnu/ncurses/ncurses-6.3.tar.gz && \
    tar -xf /os/work/ncurses-6.3.tar.gz && \
    cd /os/work/ncurses-6.3 && \
    ./configure --prefix=/usr --host=$LFS_TARGET --with-shared --with-pkg-config \
        --enable-pc-files --enable-shared --without-progs \
        --disable-widec --enable-termcap --enable-getcap && \
    make -j{{  CONCURRENCY_THREADS }} && \
    make DESTDIR=/usr/aarch64-unknown-linux-musl install && \
    cp /usr/${LFS_TARGET}/usr/lib/*curs* /os/rootfs/usr/lib && \
    cp /usr/${LFS_TARGET}/usr/lib/libform* /os/rootfs/usr/lib && \
    cp /usr/${LFS_TARGET}/usr/lib/libmenu* /os/rootfs/usr/lib && \
    cp /usr/${LFS_TARGET}/usr/lib/libpanel* /os/rootfs/usr/lib

RUN cd /os/work && \
    wget https://www.netfilter.org/pub/libmnl/libmnl-1.0.4.tar.bz2 && \
    tar -xf libmnl-1.0.4.tar.bz2 && \
    cd /os/work/libmnl-1.0.4 && \
    ./configure --prefix=/usr --host=$LFS_TARGET && \
    make -j{{ CONCURRENCY_THREADS }} && \
    make DESTDIR=/usr/aarch64-unknown-linux-musl install && \
    cp /usr/aarch64-unknown-linux-musl/usr/lib/libmnl* /os/rootfs/usr/lib

RUN cd /os/work && \
    wget https://www.netfilter.org/pub/libnftnl/libnftnl-1.2.1.tar.bz2 && \
    tar -xf /os/work/libnftnl-1.2.1.tar.bz2 && \
    cd /os/work/libnftnl-1.2.1 && \
     ./configure --prefix=/usr --host=$LFS_TARGET && \
    make -j{{ CONCURRENCY_THREADS }} && \
    make DESTDIR=/usr/aarch64-unknown-linux-musl install && \
    cp /usr/aarch64-unknown-linux-musl/usr/lib/libnftnl* /os/rootfs/usr/lib

RUN cd /os/work && \
    wget https://mirror.yandex.ru/mirrors/gnu/gmp/gmp-6.2.1.tar.xz && \
    tar -xf /os/work/gmp-6.2.1.tar.xz && \
    cd /os/work/gmp-6.2.1 && \
    ./configure --prefix=/usr --host=$LFS_TARGET && \
    make -j{{ CONCURRENCY_THREADS }} && \
    make DESTDIR=/usr/${LFS_TARGET} install && \
    cp /usr/${LFS_TARGET}/usr/lib/libgmp* /os/rootfs/usr/lib

RUN cd /os/work && \
    wget https://mirror.yandex.ru/mirrors/gnu/readline/readline-8.1.2.tar.gz && \
    tar -xf /os/work/readline-8.1.2.tar.gz && \
    cd /os/work/readline-8.1.2 && \
    ./configure --prefix=/usr --host=$LFS_TARGET --with-curses && \
    make -j{{ CONCURRENCY_THREADS }} && \
    make DESTDIR=/usr/${LFS_TARGET} install && \
    cp -v /usr/${LFS_TARGET}/usr/lib/lib{history,readline}* /os/rootfs/usr/lib

RUN cd /os/work && \
    wget https://www.netfilter.org/pub/nftables/nftables-1.0.1.tar.bz2 && \
    tar -xf /os/work/nftables-1.0.1.tar.bz2 && \
    cd /os/work/nftables-1.0.1 && \
    rm -rf /usr/$LFS_TARGET/usr/lib/*.la && \
    LDFLAGS="${LDFLAGS} -lncurses" \
    ./configure --prefix=/ --host=$LFS_TARGET --with-cli=readline --disable-man-doc --disable-python && \
    make -j{{ CONCURRENCY_THREADS }} && \
    make DESTDIR=/usr/$LFS_TARGET install && \
    cp -v /usr/$LFS_TARGET/lib/libnftables.{a,so,so.1,so.1.1.0} /os/rootfs/lib && \
    cp -v /usr/$LFS_TARGET/sbin/nft /os/rootfs/sbin && \
    cp -rv /usr/$LFS_TARGET/etc/nftables /os/rootfs/etc && \
    cp -rv /usr/$LFS_TARGET/share/nftables /os/rootfs/usr/share && \
    cp -rv /usr/$LFS_TARGET/include/nftables /os/rootfs/usr/include

RUN cd /os/work && \
    git clone --depth 1 https://github.com/shemminger/iproute2 -b v5.16.0 iproute2 && \
    cd /os/work/iproute2 && \
    sed -i /ARPD/d Makefile && \
    rm -fv man/man8/arpd.8 && \
    sed -i 's/.m_ipt.o//' tc/Makefile && \
    sed -i 's/:= gcc/?= gcc/g' Makefile && \
    sed -i 's/netax25/linux/g' lib/ax25_ntop.c && \
    ./configure --prefix=/usr && \
    sed -i 's/HAVE_CAP:=y/HAVE_CAP:=n/g' config.mk && \
    sed -i 's~IPT_LIB_DIR:=/usr/lib64/xtables~TC_CONFIG_NO_XT:=y~g' config.mk && \
    sed -i 's/CFLAGS += -DHAVE_LIBCAP//g' config.mk && \
    sed -i 's/LDLIBS += -lcap//g' config.mk && \
    sed -i 's/\$(MAKE)/\$(MAKE) CC="\$(CC)" LD="\$(LD)" \$(MFLAGS)/g' Makefile && \
    cp -rv /usr/$LFS_TARGET/usr/include/libmnl /os/rootfs/usr/include/ && \
    HOSTCC=gcc make -j{{ CONCURRENCY_THREADS }} && \
    make DESTDIR=/os/rootfs install

RUN cd /os/work && \
    git clone https://git.kernel.org/pub/scm/fs/ext2/e2fsprogs.git -b v1.46.5 --depth 1 e2fsprogs && \
    cd /os/work/e2fsprogs && \
    CROSS_COMPILE="${LFS_TARGET}-" ./configure --prefix=/usr --host=$LFS_TARGET \
                --enable-libuuid && \
    make -j{{ CONCURRENCY_THREADS }} && \
    cd /os/work/e2fsprogs/e2fsck && make DESTDIR=/os/rootfs install && \
    cd /os/work/e2fsprogs && make DESTDIR=/usr/$LFS_TARGET install-libs

RUN cd /os/work && \
    git clone https://git.kernel.org/pub/scm/linux/kernel/git/jaegeuk/f2fs-tools.git --depth 1 -b v1.14.0 f2fs-tools && \
    cd /os/work/f2fs-tools && \
    ./autogen.sh && \
    cp /var/db/repos/gentoo/sys-libs/queue-standalone/files/queue.h /usr/$LFS_TARGET/usr/include/sys && \
    echo 'mkfs_f2fs_LDFLAGS = -all-static' >> mkfs/Makefile.am && \
    echo 'fsck_f2fs_LDFLAGS = -all-static' >> fsck/Makefile.am && \
    ./configure --prefix=/usr --host=$LFS_TARGET --without-selinux --without-blkid && \
    make -j{{  CONCURRENCY_THREADS }} && \
    cd /os/work/f2fs-tools/fsck && make DESTDIR=/os/rootfs install-exec


{% if not IS_QEMU %}
ADD boot.cmd /os/rootfs/boot
{% else %}
ADD qemu-boot.cmd /os/rootfs/boot/boot.cmd
{% endif %}

RUN /os/work/uboot/tools/mkimage -C none -A arm -T script -d /os/rootfs/boot/boot.cmd /os/rootfs/boot/boot.scr && \
    cd /os/work/kernel && \
    export R4S_KERNEL_VER=`make kernelrelease` && \
    cd /os/rootfs/boot && \
    ln -sf Image-${R4S_KERNEL_VER} Image

# ADD dbgstub.c /tmp
# RUN cd /tmp && \
#     $CC -g -o /os/rootfs/bin/dbgstub dbgstub.c && \
#     chmod a+x /os/rootfs/bin/dbgstub

ADD authorized_keys /os/rootfs/etc/dropbear
ADD etc/shells /os/rootfs/etc
RUN chmod 0600 /os/rootfs/etc/dropbear && \
    chmod 0644 /os/rootfs/etc/shells
